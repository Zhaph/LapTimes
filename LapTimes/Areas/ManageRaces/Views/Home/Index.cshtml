@model LapTimes.Models.Race

@{
  ViewBag.Title = "Manage Races";
}

<hgroup class="title">
  <h1>@ViewBag.Title</h1>
</hgroup>

<article>
  <h2>Run a race</h2>
  @if (Model == null || Model.RaceId == 0)
  {
    using (Html.BeginForm())
    {
      @Html.ValidationSummary(true)

      <fieldset>
        <legend>Run a race</legend>

        @Html.HiddenFor(model => model.RaceId)

        @Html.EditorFor(model => model.Drivers)

        <p>
          <input type="submit" value="Prepare Race" />
        </p>

      </fieldset>
    }
  }
  else
  { 
  <div>
    @Html.HiddenFor(model => model.RaceId)
    <ul class="home-current-racers">
    @for (int i = 0; i < Model.Drivers.Count(); i++)
    {
      <li>
        <i class="fa fa-tachometer"></i> 
        In lane @Html.DisplayFor(model => model.Drivers[i].Lane): 
        <span class="home-driver-name">@Html.DisplayFor(model => model.Drivers[i].Racer.Name)</span> 
        is driving car number <span class="home-car-name">@Html.DisplayFor(model => model.Drivers[i].Car.Name)</span>
      </li>
    }
    </ul>
    <!-- Set up Knockout Stopwatches... -->
    <h3>Time:</h3>

    <input id="rawStopwatch" type="hidden" value="0" />
    <input class="stopwatch" id="stopwatch" type="text" value="00:00.000" /><br/>
    <input class="button" id="startandstopbutton" type="button" value="Start" /><br/>
    <input class="button" id="marklapbutton" type="button" value="10 Laps Complete!" /><br/>
    <input class="button" id="resetbutton" type="button" value="Reset Race" /><br/>
    <ol data-bind="foreach: LaneTimes">
      <li>
        <span class="race-time" data-bind="text: convertTime($data)"></span>
        <input class="race-time" type="time" step="0.001" data-bind="attr: {'data-val': $index}" />
        <select class="finished-times" data-bind="attr: {'data-val': $index}, 
                           options: $root.CurrentRace().Drivers(),
                           optionsText: function (item) {  return item.Lane() + '. ' + item.Name() + ' (' + item.Car() + ')';},
                           optionsValue: 'RacerId'
                           " ></select>
      </li>
    </ol>
    <input type="button" class="button" id="submitTimes" value="Finish Race!" data-bind="visible: LaneTimes().length == numberOfLanes, click: updateTimes"/>
  </div>
  }
</article>

<aside>
  <h3>Race Management:</h3>
  <ul>
    <li>@Html.ActionLink("Manage Races", "Index", "Races")</li>
    <li>@Html.ActionLink("Manage Cars", "Index", "Cars")</li>
  </ul>
</aside>

@section scripts
{
  @Scripts.Render("~/bundles/Knockout")
  <script src="~/signalr/hubs"></script>

  <script>
   var numberOfLanes = @ViewBag.NumberOfLanes;

    $(function () {
      var drivers = $('[id*="RacerId"]');
      var driverOptions = drivers.find('option');
      var cars = $('[id*="CarId"]');

      if (drivers.length > 0) {
        drivers.change(function () {
          var val = $(this).val();

          var selected = [];
          selected.push(val);

          drivers.not($(this)).each(function (i, element) {
            if ($(element).val()) {
              // We have a selected value
              if (selected.indexOf($(element).val()) < 0) {
                // Current item also isn't already selected...
                selected.push($(element).val());
              } else {
                // find option that isn't selected...
                driverOptions.each(function (j, option) {
                  if (selected.indexOf($(option).val()) < 0) {
                    selected.push($(option).val());
                    $(element).val($(option).val());
                  }
                });
              }
            }
          });
        });

        cars.change(function () {
          var val = $(this).val();

          cars.not($(this)).each(function (i, element) {
            if ($(element).val() && $(element).val() == val) {
              $(element).val('');
            }
          });
        });
      }
      else
      {
        var x = new clsStopwatch();
        var rawTime = $('#rawStopwatch');
        var formattedTime = $('#stopwatch');
        var clockTimer;
        var finishedLanes = 0;

        $('#startandstopbutton').click(function(){
          if (!x.isRunning()) {
            vm.RaceStarted();
            clockTimer = setInterval(update, 1);
            x.start();
            $(this).attr('value', 'Stop');
          } else {
            stopTimer(true);
          }
        });

        $('#marklapbutton').click(function(){
          if (x.isRunning()) {
              vm.LaneTimes.push(x.time());
              finishedLanes++;
            if (finishedLanes >= numberOfLanes) {
              stopTimer(false);
            }
          }
        });

        $('#resetbutton').click(function(){
          if (x.isRunning()) {
            stopTimer(true);
          }
          vm.LaneTimes.removeAll();
          finishedLanes = 0;
          x.reset();
          update();
        });

        function update(){
          $(formattedTime).val(convertTime(x.time()));
          $(rawTime).val(x.time());
        }

        function stopTimer(aborted) {
          clockTimer = null;
          x.stop();
          $('#startandstopbutton').attr('value', 'Start');
          vm.RaceStopped(aborted);
        }

        // Set Up Knockout/SignalR for the Races

        function RaceViewModel() {
          var self = this;
          self.CurrentRace = ko.observable();
          self.LaneTimes = ko.observableArray();

          var race = $.connection.raceHub;

          self.updateTimes = function() {
            var laneResults = [];

            for (var i = 0; i < numberOfLanes; i++) {
                var time = $("input[data-val=" + i + "]");
              var racer = $("select[data-val=" + i + "]");
              laneResults.push({ RacerId: $(racer).val(), RaceTime: $(time).val() });
            }

            race.server.finishRaceString(self.CurrentRace().RaceId, laneResults);
          };

          // Initializes the view model
          self.init = function() {
            race.server.getCurrentRace();
          };

          race.client.getCurrentRace = function(currentRace) {
            self.CurrentRace(new CurrentRace(currentRace));
          };

          race.client.RedirectToRace = function() {
            location.reload(true);
          };

          self.RaceStarted = function(){
            race.server.startRace(self.CurrentRace().RaceId);
          };

          self.RaceStopped = function(aborted){
            race.server.stopRace(self.CurrentRace().RaceId, aborted);
          };

        }

        var vm = new RaceViewModel();
        $.connection.hub.start(function () { vm.init(); });

        ko.applyBindings(vm);
      }
    });


 
  </script>
}
