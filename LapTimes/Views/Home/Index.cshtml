@{
    ViewBag.Title = "Let's Race!";
}
@section featured {
    <section class="featured">
        <div class="content-wrapper">
          <hgroup class="title">
              <h1>@ViewBag.Title</h1>
              <h2 id="raceStatus">@ViewBag.Message</h2>
          </hgroup>
          <p id="raceDetails">
            <ul style="list-style: none; padding: 0 0 5px;">
              <li>
                <i class="fa fa-tachometer"></i> In lane <span t-data-bind="text: Lane"></span>, we have <span t-data-bind="text: Name"></span> driving <span t-data-bind="text: Car"></span>
              </li>
            </ul>
          </p>
        </div>
    </section>
}
<h3 style="text-align: center;"><i class="fa fa-flag-checkered fa-lg"></i> Current Leaders <i class="fa fa-flag-checkered fa-lg"></i></h3>

<div data-bind="foreach:Leagues" class="clear-fix">
  <div data-bind="style: { width: $root.getWidth()}" style="text-align: center;" class="float-left">
    <h4 data-bind="text: Name"></h4>
    <ul data-bind="foreach: Racers" style="list-style: none; padding: 0;">
      <li>
        <h5>
          <!-- ko if: $index() === 0 -->
          <i class="fa fa-trophy fa-2x gold"></i>
          <!-- /ko -->
          <!-- ko if: $index() === 1 -->
          <i class="fa fa-trophy fa-lg silver"></i>
          <!-- /ko -->
          <!-- ko if: $index() === 2 -->
          <i class="fa fa-trophy bronze"></i>
          <!-- /ko -->
          <span data-bind="text: Name"></span>
        </h5>
        <p data-bind="text: $root.bestTime(RawBestTime)"></p>
      </li>
    </ul>
  </div>
</div>

@section scripts {
  <!--Reference the SignalR library. -->
  <script src="~/Scripts/jquery.signalR-1.1.3.js"></script>
  <script src="~/Scripts/knockout-2.1.0.js"></script>
  <!--Reference the autogenerated SignalR hub script. -->
  <script src="~/signalr/hubs"></script>

  <script>
    $(function () {

      function Racer(data) {
        var self = this;
        self.RacerId = data.RacerId;
        self.Name = ko.observable(data.Name);
        self.RawBestTime = ko.observable(data.RawBestTime);

        self.BestTime = function (time) {

          function addZ(n) {
            return (n < 10 ? '0' : '') + n;
          }

          var ms = time % 1000;
          time = (time - ms) / 1000;
          var secs = time % 60;
          time = (time - secs) / 60;
          var mins = time % 60;

          return addZ(mins) + ':' + addZ(secs) + '.' + ms;
        }
      }

      function League(data) {
        var self = this;
        self.LeagueId = data.LeagueId;
        self.Name = ko.observable(data.Name);

        var mappedDrivers = $.map(data.Drivers, function (item) {
          return new Racer(item);
        });

        self.Racers = ko.observableArray(data.Drivers);
      }

      function LeaguesViewModel() {
        var self = this;
        self.Leagues = ko.observableArray([]);

        var race = $.connection.raceHub;

        //Initializes the view model
        self.init = function () {
          race.server.getAllLeagues();
        }

        race.client.getAllLeagues = function (currentLeaderBoards) {
          var mappedLeagues = $.map(currentLeaderBoards, function (item) {
            return new League(item);
          });

          self.Leagues(mappedLeagues);
        }

        race.client.updateRace = function (currentRace) {
          var raceStatus = $('#raceStatus');
          if (!currentRace.IsComplete) {
            raceStatus.html("Race in progress!");
          }
          else {
            raceStatus.html("Race complete!");
          }
        };

        // Helpers
        self.bestTime = function (time) {
          function addZ(n) {
            return (n < 10 ? '0' : '') + n;
          }

          function addZZ(n) {
            return (n < 100 ? '0' + addZ(n) : n);
          }

          var ms = time % 1000;
          time = (time - ms) / 1000;
          var secs = time % 60;
          time = (time - secs) / 60;
          var mins = time % 60;

          return addZ(mins) + ':' + addZ(secs) + '.' + addZZ(ms);
        };

        self.getWidth = function() {
          return 100 / self.Leagues().length + '%';
        };
      };

      var vm = new LeaguesViewModel();
      // Start the connection
      $.connection.hub.start(function () { vm.init(); });


      ko.applyBindings(vm);
    });
  </script>
}